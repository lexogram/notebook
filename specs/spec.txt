User selects a chunk to study
Chunk is extended to include complete phrase
=> regex to select whole phrase depends on language and script

Parent phrase shown in separate <p>
User can "select" (highlight) individual chunks in the parent phrase (by adding span elements to cloned parent)
Selected text is now shown as "this is ... selected"
Separate field to create a lemma-tized version: "<subject> ... selected" 

Extract an expression that will allow the original selection to be reselected if a different user visits the page.

Create database query:
* time
* selected words
* language
* userID
* url (could be used to detect subject matter)
* priority (depends on which tab is open: definition, translation, synonyms...)

Database streams response, starting with the priority

Show database response

User adds personal notes


In my case, I want to translate text and save it sentence by sentence (or possibly by paragraph). I want to get:
* a reminder of where I saw each word before

I want to
* See each sentence, one at a time
* Write my translation, without using any help, if possible
* See a Google translation of the whole sentence as a starting point
* Edit my translation
* Save my translation automatically when I move to the next sentence
* Be able to return to a sentence I translated before and correct it
* Share my whole translation with someone, who does not need the fine-grained detail that I needed

If I am reading a text that I understand quite well, I may just want to collapse the notebook until I need to check a word.

* Select the word
* Sentence is included
* Database is queried
* Information shown
* Action
  - Check the definition which seems most accurate
  - Implicitly indicate that I am familiar with the word

If I do this for only a few words in the page, I am implicitly indicating that the other words make sense.

I open the NoteBook on a given page. This implies that the page interests me. The url/content is sent to the database. If the URL only is sent, then my bandwidth is not used unnecessarily: the server can get the page, independently.

I have to open the NoteBook explicitly for each page I want to use it with, even if the NoteBook itself is displayed in another window.

Click anywhere to select that word in that sentence.
——————
Send the text of the current page to the Notebook window.

——————
A text extract needs to be treated multiple times:
1. Detect individual words
   In agglutinative languages, this step may be skipped
2. Break into morphemes
   Each word needs to be connected to its morphemes, so that the text can be exploded. New words can:
   * contain new morphemes
     In this case, you need to learn the effect of the morpheme in this context (small-er, sell-er)
   * be composed of familiar morphemes in a new manner.
     In this case, knowing the morphemes can help you to guess the meaning
3. Reconstituted into phrases by regexes
   Each morpheme may have several regexes connected with it that allow you to identify multi-word/multi-morpheme phrases that have a meaning of their own

First step: for English, identify all the words in an extract and order them by frequency.

——————

- Send selection to server
- On server:
  - identify words
  - get relative frequency of each word as index and %
  - send result to NoteBook
- In NoteBook
  - list words in order of frequency
  - show index and %

- In content page
  - Add Toolbar
  - Replace body with an altered copy
  - Send full text to NoteBook
    - NoteBook asks server for frequency map
  - Set colour for each word according to frequency

  ——————

  * Different scope and chrome object for
    - page script
    - content script
    - background script
  * Add content script to all pages except NoteBook
  * Require user to activate extension for each individual tab
  * If tab is using extension, keep it active
  * If window is closed 
    - All tabs should disconnect and revert to original
  * Toolbar should
    - Let you show familiarity mark-up colours, or hide it
    - Let you choose which iframes to annotate, if there are any
      - change opacity when not selected
    - Let you examine an arbitrary chunk of text (that you might create yourself)
    - Let you switch off the extension for this tab
  * browserAction should allow you to
    - Activate for the current tab
    - Choose to add this site or this page to the "Always Annotate" list
    - Switch users?
  * Switching the annotation on for a tab should
    - Show the toolbar
    - Open the window, if is not open
    - Set a flag in the content script to track key and mouse events

If multiple active tabs are open, then
* switching between these tabs will update the NoteBook to what it was showing last
  - Active tab
  - Selected text
  ??? Perhaps there might be a reason for showing two NoteBook windows side-by-side ???
  > The content script will need to remember its state so that it
    can restore it, when its tab is selected.
* If a tab that is not using the extension is activated, then the NoteBook window should not update. It should still be active so that you can use it to explore words and phrases. The Expression field should be editable, so that you can check on any text, but custom text should not be stored as language samples on the database.

This means that switching to an active tab could overwrite the custom stuff that you have entered. Custom entries could be stored at a Custom tab that opens/becomes active when you switch to a non-active tab. When you return to an active tab, the Custom tab remains unchanged.

——————

For the first tutorial, we need to create:
* A content script that connects to the background script, to tell it about selection changes
  ??? Is there an onSelectionChange event ???
* A connection between the Meteor page script and the background script, so that the background script can update the NoteBook.

——————

Set the text of the main page to grey, then, as each word is selected, get information on it from the server, and set its colour to black. There will be no memory of the page ever having been seen before, so it will start over all grey the next time.

———————

We want to remember the latest request to Wiktionary
* word
* ISO code

If the native language changes then Wiktionary should be called again
If the Wiktionary panel is not active, then it should be called when the panel is opened

Selection.set("lastRequest", {
  lang: <ISO code>
, text: <string>
}
Session.set("lastRequestTreated", true|false)
})

———————

Always activate ...
* Get the the url for the current tab
* If [site], then get origin.
* If [page], then use entire url, except for hash
Save as {
  <origin>: {
    "*"
  , "path/name/"
  }
}

If user switches off always activate for a site, or shifts to page ...?